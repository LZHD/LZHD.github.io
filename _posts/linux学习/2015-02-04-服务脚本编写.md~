---
layout : life
title: linux服务脚本编写
category : linux学习
duoshuo: true
date : 2015-02-04
---

<!-- more -->

******

```sh

#!/bin/bash

### BEGIN INIT INFO
# Provides:          应用程序开发者
# RequiRED-Start:    $all
# RequiRED-Stop:     $all
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: 简短应用程序描述
# Description:       详细应用程序描述
### END INIT INFO

# 程序文件目录
ROOT="/usr/local/app"
# 程序文件
APP="./bin/application"
# 程序配置文件
CONFIG="./conf/srs.conf"
# 程序进程ID
DEFAULT_PID_FILE='./bin/app.pid'
# 服务日志
DEFAULT_LOG_FILE='./bin/app.log'

# 样式定制
RED="\\e[31m"
GREEN="\\e[32m"
YELLOW="\\e[33m"
BLACK="\\e[0m"
POS="\\e[60G"

ok_msg() {
    echo -e "${1}${POS}${BLACK}[${GREEN}  OK  ${BLACK}]"
}

failed_msg() {
    echo -e "${1}${POS}${BLACK}[${RED}FAILED${BLACK}]"
}

# load process info of app
# @set variable $app_pid to the process id in srs.pid file.
# @return 0, if process exists; otherwise:
#       1, for pid file not exists.
#       2, for get proecess info by pid failed.
# @set variable $error_msg if error.
# @set variable $pid_file to pid file.
load_process_info() {
    # get pid file
    pid_file=`cd ${ROOT} && cat ${CONFIG} |grep ^pid|awk '{print $2}'|awk -F ';' '{print $1}'`
    if [[ -z $pid_file ]]; then pid_file=${DEFAULT_PID_FILE}; fi
    # get abs path
    pid_dir=`dirname $pid_file`
    pid_file=`(cd ${ROOT}; cd $pid_dir; pwd)`/`basename $pid_file`
    
    app_pid=`cat $pid_file 2>/dev/null`
    ret=$?; if [[ 0 -ne $ret ]]; then error_msg="file $pid_file does not exists"; return 1; fi
    
    ps -p ${app_pid} >/dev/null 2>/dev/null
    ret=$?; if [[ 0 -ne $ret ]]; then error_msg="process $app_pid does not exists"; return 2; fi
    return 0;
}

start() {
    # if exists, exit.
    load_process_info
    if [[ 0 -eq $? ]]; then failed_msg "${APP} started(pid ${app_pid}), should not start it again."; return 0; fi
    
    # not exists, start server
    ok_msg "Starting ${APP}..."
    
    # get log file
    log_file=`cd ${ROOT} && cat ${CONFIG} |grep '^log_file'| awk '{print $2}'| awk -F ';' '{print $1}'`
    if [[ -z $log_file ]]; then log_file=${DEFAULT_LOG_FILE}; fi
    # get abs path
    log_dir=`dirname $log_file`
    log_file=`(cd ${ROOT} && cd $log_dir && pwd)`/`basename $log_file`
    
    # TODO: FIXME: set limit by, for instance, "ulimit -HSn 10000"
    if [[ -z $log_file ]]; then
        (ulimit -c unlimited && cd ${ROOT}; ${APP} -c ${CONFIG} >/dev/null 2>&1)
    else
        (ulimit -c unlimited && cd ${ROOT}; ${APP} -c ${CONFIG} >> $log_file 2>&1)
    fi
    
    # check again after start server
    for ((i = 0; i < 5; i++)); do
        # sleep a little while, for app may start then crash.
        sleep 0.1
        load_process_info
        ret=$?; if [[ 0 -ne $ret ]]; then 
            failed_msg "${APP} start failed"; 
            failed_msg "see $log_file"; 
            return $ret; 
        fi
    done
    
    # check whether started.
    load_process_info
    ret=$?; if [[ 0 -eq $? ]]; then ok_msg "${APP} started(pid ${app_pid})"; return 0; fi
    
    failed_msg "${APP} not started"
    return $ret
}

stop() {
    # not start, exit
    load_process_info
    if [[ 0 -ne $? ]]; then failed_msg "${APP} not start."; return 0; fi
    
    ok_msg "Stopping ${APP}(pid ${app_pid})..."
    
    # process exists, try to kill to stop normally
    for((i=0;i<30;i++)); do
        load_process_info
        if [[ 0 -eq $? ]]; then
            kill -s SIGTERM ${app_pid} 2>/dev/null
            ret=$?; if [[ 0 -ne $ret ]]; then failed_msg "send signal SIGTERM failed ret=$ret"; return $ret; fi
            sleep 0.1
        else
            ok_msg "${APP} stopped by SIGTERM"
            # delete the pid file when stop success.
            rm -f ${pid_file}
            break;
        fi
    done
    
    # process exists, use kill -9 to force to exit
    load_process_info
    if [[ 0 -eq $? ]]; then
        kill -s SIGKILL ${app_pid} 2>/dev/null
        ret=$?; if [[ 0 -ne $ret ]]; then failed_msg "send signal SIGKILL failed ret=$ret"; return $ret; fi
        ok_msg "${APP} stopped by SIGKILL"
    else
        # delete the pid file when stop success.
        rm -f ${pid_file}
    fi
    
    sleep 0.1
    return 0
}

# get the status of srs process
# @return 0 if srs is running; otherwise, 1 for stopped.
status() {
    load_process_info
    ret=$?; if [[ 0 -eq $ret ]]; then echo "${APP}(pid ${app_pid}) is running."; return 0; fi
    
    echo "${APP} is stopped, $error_msg"
    return 1
}

reload() {
    # not start, exit
    load_process_info
    if [[ 0 -ne $? ]]; then failed_msg "${APP} not start."; return 0; fi
    
    ok_msg "Reload ${APP}(pid ${app_pid})..."
    
    # process exists, reload it
    kill -s SIGHUP ${app_pid} 2>/dev/null
    ret=$?; if [[ 0 -ne $ret ]]; then failed_msg "Reload ${APP} failed ret=$ret"; return $ret; fi
    
    load_process_info
    if [[ 0 -ne $? ]]; then failed_msg "${APP} reload failed."; return $ret; fi
    
    ok_msg "${APP} reloaded"
    return 0
}

menu() {
    case "$1" in
        start)
            start
            ;;
        stop)
            stop
            ;;
        restart)
            stop
            start
            ;;
        status)
            status
            ;;
        reload)
            reload
            ;;
        *)
            echo "Usage: $0 {start|stop|status|restart|reload}"
            return 1
            ;;
    esac
}

menu $1

code=$?
exit ${code}

```
